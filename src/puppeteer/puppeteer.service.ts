import { BadRequestException, Injectable, Logger } from '@nestjs/common';
import * as fs from 'fs';
import * as puppeteer from 'puppeteer';
import { PrismaService } from 'src/prisma/prisma.service';
import { LoginDto, PostDto } from './puppeteer.dto';
import { delay, downloadImageToTempFile } from './puppeteer.utils';

@Injectable()
export class PuppeteerService {
  private readonly logger = new Logger(PuppeteerService.name);

  constructor(private prisma: PrismaService) {}

  async   login({
    login,
    password,
    proxy,
    userAgent,
  }: LoginDto): Promise<{ result: any; page: puppeteer.Page | null }> {
    const delay = (ms: number) =>
      new Promise((resolve) => setTimeout(resolve, ms));

    let browser: any;
    let page: puppeteer.Page | null = null;
    try {
      this.logger.log('Launching browser with userAgent: ' + userAgent);

      const args = [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--no-zygote',
        '--incognito',
      ];

      let proxyAuth: { username: string; password: string } | null = null;

      if (proxy) {
        const proxyParts = proxy.split(':');

        if (proxyParts.length < 2) {
          throw new BadRequestException(
            '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è IP:PORT –∏–ª–∏ IP:PORT:LOGIN:PASSWORD',
          );
        }

        const [ip, port, username, pwd] = proxyParts;
        const proxyUrl = `http://${ip}:${port}`;
        args.unshift(`--proxy-server=${proxyUrl}`);
        this.logger.log(`Using proxy: ${proxyUrl}`);

        if (username && pwd) {
          proxyAuth = {
            username,
            password: pwd,
          };
          this.logger.log('Proxy authentication credentials set');
        }
      }

      browser = await puppeteer.launch({
        headless: process.env.NODE_ENV === 'production', // –∏–ª–∏ false
        executablePath:
          process.env.CHROMIUM_EXEC_PATH || puppeteer.executablePath(),
        args,
      });

      this.logger.log('Browser launched successfully');

      page = await browser.newPage();

      if (proxyAuth && page) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ page —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await page.authenticate(proxyAuth);
        this.logger.log('Proxy authentication applied');
      }

      if (page) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ page —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await page.setUserAgent(userAgent);
        this.logger.log('New page created and userAgent set');

        this.logger.log('Navigating to login page...');
        await page.goto('https://twitter.com/i/flow/login', {
          waitUntil: 'networkidle2',
        });

        this.logger.log('Typing login...');
        await page.waitForSelector('input[name="text"]', { timeout: 10000 });
        await page.type('input[name="text"]', login);
        await page.keyboard.press('Enter');
        await delay(2000);

        // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "Unusual login activity"
        try {
          await page.waitForSelector('h1[role="heading"]', { timeout: 3000 });

          const challengeText = await page.evaluate(() => {
            const xpath =
              "//text()[contains(., 'There was unusual login activity on your account. To help keep your account safe, please enter your')]";
            const result = document.evaluate(
              xpath,
              document,
              null,
              XPathResult.FIRST_ORDERED_NODE_TYPE,
              null,
            );
            return result.singleNodeValue?.textContent || '';
          });

          if (
            challengeText.includes(
              'There was unusual login activity on your account. To help keep your account safe, please enter your',
            )
          ) {
            this.logger.warn(
              'Unusual login activity detected, waiting for user input...',
            );
            return { result: { challengeRequired: true }, page };
          }
        } catch (err) {
          this.logger.log('No unusual activity challenge detected');
        }

        this.logger.log('Typing password...');
        await page.waitForSelector('input[name="password"]'); // –ë–µ–∑ timeout ‚Äî –∂–¥—ë–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ
        await page.type('input[name="password"]', password);
        await page.keyboard.press('Enter');
        await delay(3000);

        const loginError = await page.evaluate(() => {
          const el = document.querySelector('div[role="alert"]')?.textContent;
          return el || '';
        });

        if (
          loginError.toLowerCase().includes('wrong') ||
          loginError.toLowerCase().includes('–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π')
        ) {
          this.logger.warn('Login failed: ' + loginError);
          return { result: { success: false, error: loginError }, page };
        }

        this.logger.log('Waiting for 2FA prompt or login success...');
        try {
          await page.waitForSelector(
            'input[data-testid="ocfEnterTextTextInput"]',
            {
              timeout: 5000,
            },
          );
          this.logger.warn('2FA required');
          return { result: { twoFactorRequired: true }, page };
        } catch {
          const context = page.browserContext();
          const cookies = await context.cookies();
          const cookiesDir = 'cookies';
          if (!fs.existsSync(cookiesDir)) fs.mkdirSync(cookiesDir);
          await fs.promises.writeFile(
            `${cookiesDir}/${login}.json`,
            JSON.stringify(cookies, null, 2),
          );
          this.logger.log('Cookies saved after successful login');

          this.logger.log('Login successful without 2FA');
          return { result: { success: true }, page };
        }
      }
    } catch (error) {
      this.logger.error('Error during login process:', error);
      return {
        result: { success: false, error: error.message || 'Unknown error' },
        page: null,
      };
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      if (browser && 'close' in browser) {
        await browser.close();
      }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
    return { result: { success: false, error: 'Unknown error' }, page: null };
  }

  async submitChallenge({
    challengeInput,
    page,
    password,
  }: {
    challengeInput: string;
    page: puppeteer.Page;
    password: string;
  }) {
    this.logger.log('Submitting unusual login challenge input...');

    try {
      await page.type('input[name="text"]', challengeInput);
      await page.keyboard.press('Enter');
      await delay(2000);

      this.logger.log(
        'Challenge input submitted. Waiting for password field...',
      );

      await page.waitForSelector('input[name="password"]', { timeout: 10000 });

      // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è –ø–∞—Ä–æ–ª—è
      await page.type('input[name="password"]', password);
      await page.keyboard.press('Enter');

      this.logger.log('Password entered. Waiting for login success...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 2FA
      try {
        await page.waitForSelector(
          'input[data-testid="ocfEnterTextTextInput"]',
          {
            timeout: 5000,
          },
        );
        this.logger.warn('2FA required after password input');

        // –ï—Å–ª–∏ 2FA —Ç—Ä–µ–±—É–µ—Ç—Å—è, –∑–∞–ø—Ä–æ—Å–∏–º –∫–æ–¥ –∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –¥–ª—è –≤–≤–æ–¥–∞
        return { result: { twoFactorRequired: true }, page };
      } catch {
        // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–π–¥–µ—Ç –≤ —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–º –æ—à–∏–±–∫–∏
        // await page.waitForNavigation({ waitUntil: 'networkidle2' });

        const loginError = await page.evaluate(() => {
          const el = document.querySelector('div[role="alert"]')?.textContent;
          return el || '';
        });

        if (
          loginError.toLowerCase().includes('wrong') ||
          loginError.toLowerCase().includes('–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π')
        ) {
          this.logger.warn('Login failed: ' + loginError);
          return { result: { success: false, error: loginError }, page };
        } else {
          return { result: { success: true } };
        }
      }
    } catch (error) {
      this.logger.error('Error during challenge submission:', error);
      return {
        result: { success: false, error: error.message || 'Unknown error' },
        page,
      };
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      if (page && page.browser()) {
        const browser = page.browser();
        await browser.close();
      }
    }
  }

  async submitCode({
    code,
    page,
    login,
  }: {
    code: string;
    page: puppeteer.Page;
    login: string;
  }) {
    this.logger.log('Submitting 2FA code...');

    try {
      await page.type('input[data-testid="ocfEnterTextTextInput"]', code);
      await page.click('[data-testid="ocfEnterTextNextButton"]');
      await page.waitForNavigation();
      this.logger.log('2FA completed, navigation successful');

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
      try {
        const context = page.browserContext();
        const cookies = await context.cookies();
        const cookiesDir = 'cookies';
        if (!fs.existsSync(cookiesDir)) fs.mkdirSync(cookiesDir);
        await fs.promises.writeFile(
          `${cookiesDir}/${login}.json`, // –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –ø–æ URL
          JSON.stringify(cookies, null, 2),
        );
        this.logger.log('Cookies saved after submitting 2FA code');
      } catch (e) {
        this.logger.error('Error saving cookies after submitting 2FA code', e);
      }

      return { success: true };
    } catch (error) {
      this.logger.error('Error during 2FA submission', error);
      return { success: false, error: error.message || 'Unknown error' };
    } finally {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      if (page && page.browser()) {
        const browser = page.browser();
        await browser.close();
        this.logger.log('Browser closed after 2FA submission');
      }
    }
  }

  async submitPost(post: PostDto, userAgent: string) {
    let browser: any;
    try {
      const account = await this.getAccountOrThrow(post.accountId);

      browser = await this.launchBrowser(account.proxy);
      let page: puppeteer.Page;
      if (browser instanceof puppeteer.Browser) {
        page = await browser.newPage();
      } else {
        page = browser;
      }

      await page.setUserAgent(userAgent);
      await this.loadCookies(page, account.login);

      await this.navigateToComposer(page);

      // üëâ –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–∞–ø—á—É
      const isCaptcha = await this.checkCaptcha(page);
      if (isCaptcha) {
        this.logger.warn(
          '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ x.com/account/access',
        );
        return {
          success: false,
          message: 'Captcha detected. Manual action required',
          captchaDetected: true,
        };
      }

      await this.closeWelcomeModalIfExists(page);

      if (post.imageUrl) {
        const success = await this.handleMediaUpload(page, post.imageUrl);
        if (!success) return { success: false, message: 'Media upload failed' };
        if (post.targetUrl) await this.setTargetUrlCard(page, post.targetUrl);
      }

      await this.insertPostContent(page, post);
      await this.togglePromotion(page, post.promoted);

      const url = await this.publishPost(page);
      if (!url) return { success: false, message: 'Url not found' };

      await this.savePostToDb(post);
      return { success: true, url };
    } catch (error) {
      console.error('Error submitting post:', error); // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
      return { success: false, message: error.message || 'Unknown error' };
    } finally {
      if (browser && 'close' in browser) {
        await browser.close();
      }
    }
  }

  async checkCaptcha(page: puppeteer.Page): Promise<boolean> {
    const currentUrl = page.url();
    if (currentUrl.includes('x.com/account/access')) {
      console.log('Captcha page detected based on URL.');
      return true;
    }
    return false;
  }

  private async getAccountOrThrow(accountId: string) {
    const account = await this.prisma.account.findUnique({
      where: { id: accountId },
    });
    if (!account) {
      this.logger.error(`Account not found: ${accountId}`);
      throw new BadRequestException('–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    this.logger.log(`Account found: ${account.login}`);
    return account;
  }

  private async launchBrowser(
    proxy: string | null,
  ): Promise<puppeteer.Browser | puppeteer.Page> {
    const args = ['--no-sandbox', '--disable-setuid-sandbox', '--incognito'];
    let proxyAuth: { username: string; password: string } | null = null;

    if (proxy) {
      const proxyParts = proxy.split(':');

      if (proxyParts.length < 2) {
        throw new BadRequestException(
          '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è IP:PORT –∏–ª–∏ IP:PORT:LOGIN:PASSWORD',
        );
      }

      const [ip, port, username, pwd] = proxyParts;
      const proxyUrl = `http://${ip}:${port}`;
      args.unshift(`--proxy-server=${proxyUrl}`);
      this.logger.log(`Using proxy: ${proxyUrl}`);

      if (username && pwd) {
        proxyAuth = {
          username,
          password: pwd,
        };
        this.logger.log('Proxy authentication credentials set');
      }
    }

    const browser = await puppeteer.launch({
      headless: process.env.NODE_ENV === 'production',
      executablePath:
        process.env.CHROMIUM_EXEC_PATH || puppeteer.executablePath(),
      args,
    });

    if (proxyAuth) {
      const page = await browser.newPage();
      await page.authenticate(proxyAuth);
      this.logger.log('Proxy authentication applied');
      return page;
    }

    return browser;
  }

  private async setTargetUrlCard(page: puppeteer.Page, url: string) {
    const dropdownReady = await page.waitForSelector(
      'div[data-testid="destination-dropdown"]',
      { visible: true, timeout: 10000 },
    );
    if (!dropdownReady) {
      throw new Error('Target URL block not visible after Back');
    }

    try {
      const dropdownButtonSelector =
        'div[data-testid="destination-dropdown"] div.FormInputWrapper--withAbsoluteEndAdornment button.FormInput';

      await page.waitForSelector(dropdownButtonSelector, {
        visible: true,
        timeout: 10000,
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º boundingBox –∏ click —á–µ—Ä–µ–∑ evaluate, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å overlay –æ—à–∏–±–æ–∫
      const dropdownButton = await page.$(dropdownButtonSelector);
      if (!dropdownButton) throw new Error('Dropdown button not found');

      const box = await dropdownButton.boundingBox();
      if (!box) throw new Error('Dropdown button is not visible');

      await page.evaluate((selector) => {
        const el = document.querySelector(selector) as HTMLElement;
        el?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, dropdownButtonSelector);

      await dropdownButton.click();
      this.logger.log('Dropdown opened');

      const optionSelector = 'li[data-testid="card-type-dropdown-WEBSITE"]';
      await page.waitForSelector(optionSelector, {
        visible: true,
        timeout: 10000,
      });

      await page.click(optionSelector);
      this.logger.log('Selected Website option');

      // –í–≤–æ–¥–∏–º URL
      const urlInputSelector =
        'input[data-test-id="mediaWebsiteCardURLInput-0"]';
      await page.waitForSelector(urlInputSelector, {
        visible: true,
        timeout: 10000,
      });
      await page.type(urlInputSelector, url, { delay: 50 });
      this.logger.log(`Entered target URL: ${url}`);

      // –í–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      const headlineInputSelector =
        'input[data-test-id="mediaWebsiteCardHeadlineInput-0"]';
      await page.waitForSelector(headlineInputSelector, {
        visible: true,
        timeout: 10000,
      });
      await page.type(headlineInputSelector, 'Check', { delay: 50 });
      this.logger.log('Entered headline: Check');
    } catch (error) {
      this.logger.error('Error setting target URL card:', error.message);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–∞—Ä—Ç–æ—á–∫–∏ Website');
    }
  }

  private async loadCookies(page: puppeteer.Page, login: string) {
    const cookiePath = `cookies/${login}.json`;
    if (!fs.existsSync(cookiePath)) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ login().');
    }

    const cookies = JSON.parse(await fs.promises.readFile(cookiePath, 'utf-8'));
    const context = page.browserContext();
    await context.setCookie(...cookies);
    this.logger.log('Cookies loaded');
  }

  private async navigateToComposer(page: puppeteer.Page) {
    await page.goto('https://ads.x.com', { waitUntil: 'networkidle2' });
    this.logger.log('Redirected URL: ' + page.url());

    const match = page.url().match(/analytics\/([^/]+)\/campaigns/);
    if (!match) throw new Error('Ads Account ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
    const adsAccountId = match[1];

    await page.goto(`https://ads.x.com/composer/${adsAccountId}/carousel`, {
      waitUntil: 'networkidle2',
    });
  }

  private async closeWelcomeModalIfExists(page: puppeteer.Page) {
    const modalCloseButton = await page.$(
      '.Dialog--modal.Dialog--withClose.is-open button[aria-label="Close"]',
    );
    if (modalCloseButton) {
      await modalCloseButton.click();
      await page.waitForSelector('.Dialog--modal.Dialog--withClose.is-open', {
        hidden: true,
        timeout: 5000,
      });
    }
  }

  private async insertPostContent(page: puppeteer.Page, post: PostDto) {
    await page.waitForSelector('.TweetTextInput-editor', { timeout: 10000 });

    const fullContent = [post.content.trim(), post.hashtags?.trim()]
      .filter(Boolean)
      .join('\n');

    await page.evaluate((text) => {
      const editor = document.querySelector('.TweetTextInput-editor');
      if (editor && editor instanceof HTMLElement) {
        editor.focus();

        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        const selection = window.getSelection();
        const range = document.createRange();
        range.selectNodeContents(editor);
        selection?.removeAllRanges();
        selection?.addRange(range);
        editor.innerHTML = ''; // –∏–ª–∏ editor.textContent = ''; –µ—Å–ª–∏ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏

        // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
        const lines = text.split('\n');
        for (let i = 0; i < lines.length; i++) {
          const line = document.createTextNode(lines[i]);
          editor.appendChild(line);
          if (i < lines.length - 1)
            editor.appendChild(document.createElement('br'));
        }

        // –í—ã–∑—ã–≤–∞–µ–º input —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–∫–∏–µ-—Ç–æ listeners
        editor.dispatchEvent(new Event('input', { bubbles: true }));
      }
    }, fullContent);
  }

  private async togglePromotion(
    page: puppeteer.Page,
    promoted: boolean = false,
  ) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
    const isChecked = await page.evaluate(() => {
      const checkbox = document.querySelector(
        '[data-test-id="promotedOnlyCheckbox"] .Checkbox-input',
      ) as HTMLInputElement;
      return checkbox ? checkbox.checked : false;
    });

    console.log(
      `Current checkbox state: ${isChecked}, desired state: ${promoted}`,
    );

    // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∂–µ–ª–∞–µ–º—ã–º ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º
    if (promoted !== isChecked) {
      const checkbox = await page.$(
        '[data-test-id="promotedOnlyCheckbox"] .Checkbox-input',
      );

      if (checkbox) {
        // –ö–ª–∏–∫–∞–µ–º –∏ –∂–¥—ë–º, –ø–æ–∫–∞ UI —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
        await checkbox.click();
        await delay(1000); // —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π delay

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–∞
        const newState = await page.evaluate(() => {
          const checkbox = document.querySelector(
            '[data-test-id="promotedOnlyCheckbox"] .Checkbox-input',
          ) as HTMLInputElement;
          return checkbox ? checkbox.checked : false;
        });

        console.log(`New checkbox state after click: ${newState}`);

        // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ‚Äî —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ JS
        if (newState !== promoted) {
          console.warn('Click did not work, forcing checkbox value manually');
          await page.evaluate((promoted) => {
            const checkbox = document.querySelector(
              '[data-test-id="promotedOnlyCheckbox"] .Checkbox-input',
            ) as HTMLInputElement;
            if (checkbox && checkbox.checked !== promoted) {
              checkbox.checked = promoted;
              checkbox.dispatchEvent(new Event('change', { bubbles: true }));
            }
          }, promoted);

          await delay(1000); // –∂–¥—ë–º –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        }
      } else {
        console.warn('Checkbox not found on the page');
      }
    }
  }

  private async handleMediaUpload(
    page: puppeteer.Page,
    imageUrl: string,
  ): Promise<boolean> {
    try {
      await delay(2000);
      const selector = '[data-testid="adFormatsGroup-SINGLE_MEDIA"]';
      const singleMediaElement = await page.waitForSelector(selector, {
        timeout: 20000,
      });
      if (!singleMediaElement) return false;
  
      await page.evaluate((sel) => {
        const el = document.querySelector(sel);
        el?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }, selector);
  
      await singleMediaElement.focus();
      await page.keyboard.press('Space');
  
      await page.waitForSelector('button[data-test-id="addMediaButton"]', {
        timeout: 20000,
      });
      await page.click('button[data-test-id="addMediaButton"]');
  
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const localPath = await downloadImageToTempFile(imageUrl, 800, 800);
      console.log('[handleMediaUpload] Image saved to:', localPath);
  
      const input = (await page.waitForSelector(
        '.FilePicker-callToActionFileInput',
        { timeout: 20000 }, // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
      )) as puppeteer.ElementHandle<HTMLInputElement>;
  
      if (!input) {
        console.error('[handleMediaUpload] Image input not found');
        return false;
      }
      console.log(
        '[handleMediaUpload] Input element found, uploading image...',
      );
      await input.uploadFile(localPath);
  
      // –î–æ–±–∞–≤–∏–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞
      await delay(1000); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
  
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      try {
        await fs.promises.unlink(localPath);
        console.log('[handleMediaUpload] Temporary file deleted:', localPath);
      } catch (e) {
        console.warn('[handleMediaUpload] Failed to delete file:', localPath, e.message);
      }
  
      // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É Save
      try {
        await page.waitForSelector('button.Button--small', { timeout: 5000 });
  
        const buttons = await page.$$('button.Button--small');
        for (const btn of buttons) {
          const text = await btn.evaluate((el) => el.textContent?.trim());
          if (text === 'Save') {
            console.log('[handleMediaUpload] Clicking Save button...');
            await btn.click();
            break;
          }
        }
      } catch (err) {
        console.log(
          '[handleMediaUpload] Save button not found ‚Äî skipping click',
        );
      }
  
      try {
        const backButtonSelector =
          'button[aria-label="Back"].Panel-headerBackButton';
        await page.waitForSelector(backButtonSelector, { timeout: 5000 });
        await page.click(backButtonSelector);
        console.log('[handleMediaUpload] Clicked Back button');
  
        await delay(2000);
      } catch (err) {
        console.log(
          '[handleMediaUpload] Back button not found or click failed:',
          err.message,
        );
      }
  
      return true;
    } catch (err) {
      console.error(
        '[handleMediaUpload] Error during image upload:',
        err.message,
      );
      this.logger.error('Image upload error:', err.message);
      return false;
    }
  }
  

  private async publishPost(page: puppeteer.Page): Promise<string> {
    await page.waitForSelector('button[data-test-id="tweetSaveButton"]', {
      timeout: 10000,
    });

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    await page.evaluate(() => {
      const button = document.querySelector(
        'button[data-test-id="tweetSaveButton"]',
      ) as HTMLButtonElement;
      if (button) {
        button.disabled = false;
        button.classList.remove('is-disabled');
      }
    });

    // –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ
    const button = await page.$('button[data-test-id="tweetSaveButton"]');
    if (!button) throw new Error('Button not found (even after force)');
    await button.click();

    // –ñ–¥—ë–º –Ω–µ–±–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å
    await delay(2000); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä 2 —Å–µ–∫—É–Ω–¥—ã

    // await page.screenshot({ path: 'fail.png' });

    // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–≤–∏—Ç
    const tweetSelector = '.Notification-body a[href*="/status/"]';
    await page.waitForSelector(tweetSelector, { timeout: 50000 });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É
    const tweetUrl = await page.$eval(tweetSelector, (a: Element) => {
      return (a as HTMLAnchorElement).href;
    });

    return tweetUrl;
  }

  private async savePostToDb(post: PostDto) {
    await this.prisma.post.create({
      data: {
        accountId: post.accountId,
        content: post.content,
        imageUrl: post.imageUrl,
        hashtags: post.hashtags,
        targetUrl: post.targetUrl,
        promoted: post.promoted || undefined,
      },
    });
  }
}
